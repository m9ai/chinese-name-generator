import { getZodiacSign, getZodiacBackground } from './zodiac';

/**
 * 生成名字卡片图片
 * @param {Object} generatedNames - 生成的名字数据对象
 * @param {string} birthday - 生日日期字符串
 * @param {string} englishName - 用户输入的英文名
 * @returns {Promise<HTMLCanvasElement>} - 返回生成的canvas元素
 */
export const generateNameImage = async (generatedNames, birthday, englishName) => {
  // 创建Canvas元素
  const canvas = document.createElement('canvas');
  const nameCount = Object.values(generatedNames).length;
  const baseHeight = 180; // 增加标题区域高度以适应新文案
  const cardHeight = 120; // 减少卡片高度
  const spacing = 20; // 卡片间距

  // 设置Canvas尺寸
  canvas.width = 500;
  canvas.height = baseHeight + (nameCount * (cardHeight + spacing));
  const ctx = canvas.getContext('2d');

  // 1. 绘制背景
  ctx.fillStyle = '#f8fafc';
  ctx.fillRect(0, 0, canvas.width, canvas.height);

  // 2. 绘制生肖背景
  const zodiac = getZodiacSign(birthday);
  const backgroundUrl = getZodiacBackground(zodiac);
  const background = new Image();
  background.crossOrigin = 'anonymous';

  await new Promise((resolve, reject) => {
    background.onload = resolve;
    background.onerror = () => reject(new Error('load background image failed'));
    background.src = backgroundUrl;
  });

  ctx.drawImage(background, canvas.width / 4, canvas.height / 4, canvas.width * 0.8, canvas.height * 0.8);

  ctx.font = '24px Arial, sans-serif';
  ctx.fillStyle = '#155dfc';
  ctx.textAlign = 'left';
  ctx.fillText(`Chinese Name Generator`, 50, 60);
  // 3. 绘制标题文案
  ctx.font = '18px Arial, sans-serif';
  ctx.fillStyle = '#1e293b';
  ctx.textAlign = 'left';
  ctx.fillText(`Hello, ${englishName}.`, 50, 100);
  ctx.fillText(`Based on the input information, `, 50, 130);
  ctx.fillText(`your zodiac sign is ${zodiac},`, 50, 160);
  ctx.fillText('& the recommended Chinese names are as follows:', 50, 190);

  // 4. 绘制名字卡片
  const cardY = 200;

  Object.values(generatedNames).forEach((nameData, index) => {
    const y = cardY + (index * (cardHeight + spacing));

    // 移除背景色块绘制代码
    ctx.fillStyle = 'transparent';

    ctx.fillRect(50, y, canvas.width - 100, cardHeight);
    ctx.shadowBlur = 0;

    // 绘制卡片标题
    ctx.font = '16px Arial, sans-serif';
    ctx.fillStyle = '#64748b';
    ctx.textAlign = 'left';
    ctx.fillText(Object.keys(generatedNames)[index], 50, y + 20);

    // 绘制名字
    ctx.font = '32px Arial, sans-serif';
    ctx.fillStyle = '#0f172a';
    ctx.fillText(nameData.name, 50, y + 60);

    // 绘制拼音
    ctx.font = '20px Arial, sans-serif';
    ctx.fillStyle = '#3b82f6';
    ctx.fillText(nameData.pinyin, 50, y + 90);
  });

  // 加载并绘制二维码图片
  const qrCode = new Image();
  qrCode.crossOrigin = 'anonymous';
  
  await new Promise((resolve, reject) => {
    qrCode.onload = resolve;
    qrCode.onerror = () => reject(new Error('Failed to load QR code image'));
    qrCode.src = '/qrcode.png'; // public目录下的图片可直接通过根路径访问
  });
  
  // 二维码尺寸和位置 (右上角)
  const qrSize = 120;
  const qrX = canvas.width - qrSize - 40; // 右边距40px
  const qrY = 40; // 上边距40px
  ctx.drawImage(qrCode, qrX, qrY, qrSize, qrSize);
  
  // 5. 添加水印
  ctx.font = '12px Arial, sans-serif';
  ctx.fillStyle = 'rgba(100, 100, 100, 0.5)';
  ctx.textAlign = 'right';
  ctx.fillText('Generated by m9ai.work', canvas.width - 20, canvas.height - 10);

  return canvas;
};

/**
 * 下载canvas图片
 * @param {HTMLCanvasElement} canvas - canvas元素
 * @param {string} fileName - 文件名
 */
export const downloadCanvasImage = (canvas, fileName = `chinese-name-${Date.now()}.png`) => {
  try {
    const dataURL = canvas.toDataURL('image/png', 1);
    const link = document.createElement('a');
    link.href = dataURL;
    link.download = fileName;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    return true;
  } catch (error) {
    console.error('download image failed:', error);
    return false;
  }
};